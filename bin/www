#!/usr/bin/env node

/**
 * Module dependencies.
 */
const startApp = require("../src/backend/app");
const http = require("http");
const debug = require("debug")("dtr:backend");

/**
 * Get port from environment and store in Express.
 */
function startServer(serverPort, initialClient) {
    const app = startApp();
    const port = normalizePort(process.env.PORT || serverPort);
    app.set("port", port);

    /**
     * Create HTTP server.
     */

    const server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);


    app.use((req, res, next) => {
        if (req.method === "POST") {
            req.body.createdAt = Date.now();
        }
        // Continue to JSON Server router
        next();
    });

   console.log("backend started");

   registerClient(initialClient, port);

    /**
     * Register an initial client from config if there is one
     */
     function registerClient(client, port) {
        if ((client !== "") && (client != undefined)) {
            console.log("register client: " + client);

            var values = client.split("::");
            const dataStr = JSON.stringify({
                name: values[0],
                client: values[1]
            });

            const options = {
                hostname: 'localhost',
                port: port,
                path: '/clients',
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': dataStr.length
                }
            }

            const req = http.request(options, res => {
                console.log(`statusCode: ${res.statusCode}`)

                res.on('data', d => {
                    process.stdout.write(d);
                    process.stdout.write('\n');
                })
            })

            req.on('error', error => {
                console.error(error)
            })

            req.write(dataStr)
            req.end()
        }
    }

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        const port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== "listen") {
            throw error;
        }

        const bind = typeof port === "string"
            ? "Pipe " + port
            : "Port " + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case "EACCES":
                console.error(bind + " requires elevated privileges");
                process.exit(1);
                break;
            case "EADDRINUSE":
                console.error(bind + " is already in use");
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        const addr = server.address();
        const bind = typeof addr === "string"
            ? "pipe " + addr
            : "port " + addr.port;
        debug("Listening on " + bind);
    }

}

module.exports = startServer;